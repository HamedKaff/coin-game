package model;

import model.interfaces.Coin;
import model.interfaces.CoinPair; 
import model.CoinImpl;

/*
 * Class:           CoinPairImpl
 * Description:     implementation of CoinPair interface which represents the coin pairs of the players 
 * Author:          Hamed Alkaff - s3708483
 */

public class CoinPairImpl implements CoinPair{
	
	private Coin coin1;
	private Coin coin2;
	

	// the CoinPairImpl constructor which creates two coins 
	public CoinPairImpl() {
		
		this.coin1 = new CoinImpl(1);
		this.coin2 = new CoinImpl(2);
	}
  
     
     @Override
     public  String toString() {
    	 return coin1 + ", " + coin2;
     }
	

	@Override
	public Coin getCoin1() {
		return coin1;
	}

	@Override
	public Coin getCoin2() {
		return coin2;
	}
    // returns true of the coins are equal, which then the hash code will be generated 
	@Override
	public boolean equals(CoinPair coinPair) {
		return coin1.equals( coinPair.getCoin1() )  && coin2.equals( coinPair.getCoin2() ); 
	}
	
	@Override
	public boolean equals(Object coinPair) { //casting each coin to the coin pair s
		return coin1.equals( ((CoinPair)coinPair).getCoin1()) && coin2.equals(((CoinPair)coinPair).getCoin2());   
	}
	
	/* returns a hash code in the following format: INFO: coinpair is Coin 1: Heads, Coin 2: Heads 24
	 * where 24 is the hashcode generated by calling the hashCode from the CoinImpl on the coin times 10 then adding coin2
	 * i.e. 2 4  24  
			2 5  25
			3 4  34
			3 5  35
	 */
	@Override
	public int hashCode() { 
		return this.coin1.hashCode() * 10 + this.coin2.hashCode();
	 
	}

}
